# Чисто для тренировки новый функций, ничего сложного. Создайте два списка — один с названиями языков программирования, другой — 
# с числами от 1 до длины первого. Вам нужно сделать две функции: первая из которых создаст список кортежей, состоящих из номера 
# и языка, написанного большими буквами. Вторая — которая отфильтрует этот список следующим образом: если сумма очков слова имеет
# в делителях номер, с которым она в паре в кортеже, то кортеж остается, его номер заменяется на сумму очков. Если нет — удаляется. 
# Суммой очков называется сложение порядковых номеров букв в слове. Порядковые номера смотрите в этой таблице, в третьем столбце: 
# https://www.charset.org/utf-8 Это — 16-ричная система, поищите, как правильнее и быстрее получать эти символы. С помощью reduce 
# сложите получившиеся числа и верните из функции в качестве ответа.

from functools import reduce


# создает список кортежей, состоящих из номера и языка, написанного большими буквами
def create_number_name_cort(name, number):
    result = list(zip(number, [i.upper() for i in name]))
    return result


# оставляет список кортежей, где сумма очков слова имеет в делителях номер, с которым она в паре в кортеже
def filter_points_name_cort(name, number):
    result = [reduce(lambda x, y: x + ord(y), i, 0) for i in name]  #список с полученными очками
    print(f'Список очков: {result}')    
    result = [(result[i], name[i]) for i in range(len(number)) if result[i] % number[i] == 0] #список соответствующий условию
    return result


name_language = ['C Sharp', 'Delphi', 'C', 'Go', 'Kotlin', 'Java']
serial_number = [i + 1 for i in range(0, len(name_language))]

print(f'Исходный список: {create_number_name_cort(name_language, serial_number)}')
print(f'Cписок, отвечающий условию : {filter_points_name_cort(name_language, serial_number)}')